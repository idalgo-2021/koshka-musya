
services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: koshka-musya-frontend
    restart: unless-stopped
    ports:
      - 3000:3000

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: koshka-musya-backend
    restart: unless-stopped
    ports:
      - '${HTTP_SERVER_PORT}:${HTTP_SERVER_PORT}'
    env_file:
      - ./backend/.env 
    environment:
      - POSTGRES_HOST=db 
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - HTTP_SERVER_ADDRESS=0.0.0.0
      - HTTP_SERVER_PORT=${HTTP_SERVER_PORT}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
      - JWT_ACCESS_TOKEN_LIFETIME_SECONDS=${JWT_ACCESS_TOKEN_LIFETIME_SECONDS}
      - JWT_REFRESH_TOKEN_LIFETIME_SECONDS=${JWT_REFRESH_TOKEN_LIFETIME_SECONDS}
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:16.1-alpine3.19
    container_name: koshka-musya-db
    restart: unless-stopped
    env_file:
      - ./backend/.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ./_data/pgdata:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pgdata:
